package com.guoheli.inf.sclient.redis;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Splitter;
import com.google.common.collect.Iterables;
import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.JedisCluster;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.exceptions.JedisDataException;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import static com.google.common.base.Preconditions.checkArgument;

class ClusterAdaptor implements JedisInternal {

	private static final String OK = "OK";

	private static final Splitter commaSplitter = Splitter.on(',').trimResults().omitEmptyStrings();

	private static final Splitter colonSplitter = Splitter.on(':').trimResults().omitEmptyStrings();

	private static final String namespaceSplitter = ":";

	private String namespace;

	private JedisCluster jedis;

	ClusterAdaptor(String namespace, JedisClusterConfig config) {
		this.namespace = namespace;
		this.jedis = buildCluster(config);
	}

	private static JedisCluster buildCluster(JedisClusterConfig config) {
		JedisPoolConfig pool = new JedisPoolConfig();
		pool.setMaxIdle(config.getPoolMaxIdle());
		pool.setMinIdle(config.getPoolMinIdle());
		pool.setTestOnBorrow(config.isPoolTestOnReturn());
		pool.setTestWhileIdle(config.isPoolTestWhileIdle());
		pool.setTestOnReturn(config.isPoolTestOnReturn());
		pool.setNumTestsPerEvictionRun(config.getNumTestsPerEvictionRun());
		pool.setTimeBetweenEvictionRunsMillis(config.getTimeBetweenEvictionRunsMillis());
		Set<HostAndPort> hostAndPorts = asNode(config.getNodes());
		return new JedisCluster(hostAndPorts, config.getConnectionTimeout(), config.getSoTimeout(), config.getMaxAttempts(), pool);
	}

	@VisibleForTesting
	static Set<HostAndPort> asNode(String nodes) {
		Stream<HostAndPort> objectStream = StreamSupport.stream(commaSplitter.split(nodes).spliterator(), false).map(input -> {
			Iterable<String> hostAndPort = colonSplitter.split(input);
			checkArgument(Iterables.size(hostAndPort) == 2, "Host:" + input + " format error");
			Iterator<String> iter = hostAndPort.iterator();
			return new HostAndPort(iter.next(), Integer.valueOf(iter.next()));
		});
		Set<HostAndPort> hostAndPorts = objectStream.collect(Collectors.toSet());
		checkArgument(!hostAndPorts.isEmpty(), "nodes param is require for redis-cluster client");
		return hostAndPorts;
	}


	@Override
	public void set(String key, String value) {
		String result = jedis.set(addNameSpace(key), value);
		if (!isOk(result)) {
			throw new JedisDataException(String.format("redis set data error: %s. %s: %s", result, addNameSpace(key), value));
		}
	}

	@Override
	public String get(String key) {
		try {
			return jedis.get(addNameSpace(key));
		}
		catch (Exception e) {
			throw new JedisDataException(String.format("redis get data error: %s. %s", e.getMessage(), addNameSpace(key)), e);
		}
	}

	@Override
	public Long del(String key) {
		return jedis.del(addNameSpace(key));
	}

	@Override
	public Long del(String... keys) {
		String[] prefixKeys = new String[keys.length];
		for (int i = 0; i < prefixKeys.length; i++) {
			prefixKeys[i] = addNameSpace(keys[i]);
		}
		return jedis.del(prefixKeys);
	}

	@Override
	public Long hset(String key, String field, String value) {
		return jedis.hset(addNameSpace(key), field, value);
	}

	@Override
	public String hget(String key, String field) {
		try {
			return jedis.hget(addNameSpace(key), field);
		}
		catch (Exception e) {
			throw new JedisDataException(String.format("redis hget data error: %s. %s %s", e.getMessage(), addNameSpace(key), field), e);
		}
	}

	@Override
	public String hmset(String key, Map<String, String> hash) {
		return jedis.hmset(addNameSpace(key), hash);
	}

	@Override
	public List<String> hmget(String key, String... fields) {
		try {
			return jedis.hmget(addNameSpace(key), fields);
		}
		catch (Exception e) {
			throw new JedisDataException(String.format("redis hmget data error: %s. %s", e.getMessage(), addNameSpace(key)), e);
		}
	}

	@Override
	public Map<String, String> hgetall(String key) {
		try {
			return jedis.hgetAll(addNameSpace(key));
		}
		catch (Exception e) {
			throw new JedisDataException(String.format("redis hgetall data error: %s. %s", e.getMessage(), addNameSpace(key)), e);
		}
	}

	@Override
	public Long hdel(String key, String... fields) {
		return jedis.hdel(addNameSpace(key), fields);
	}

	@Override
	public String setex(String key, int seconds, String value) {
		return jedis.setex(addNameSpace(key), seconds, value);
	}

	@Override
	public Boolean exists(String key) {
		try {
			return jedis.exists(addNameSpace(key));
		}
		catch (Exception e) {
			throw new JedisDataException(String.format("redis exists data error: %s. %s", e.getMessage(), addNameSpace(key)), e);
		}
	}

	@Override
	public Long setnx(String key, String value) {
		return jedis.setnx(addNameSpace(key), value);
	}

	@Override
	public String getSet(String key, String value) {
		return jedis.getSet(addNameSpace(key), value);
	}

	@Override
	public Long expire(String key, int seconds) {
		return jedis.expire(addNameSpace(key), seconds);
	}

	@Override
	public Long incr(String key) {
		return jedis.incr(addNameSpace(key));
	}

	@Override
	public Long decr(String key) {
		return jedis.decr(addNameSpace(key));
	}

	@Override
	public long sadd(String key, String... members) {
		return jedis.sadd(addNameSpace(key), members);
	}

	@Override
	public Set<String> smembers(String key) {
		return jedis.smembers(addNameSpace(key));
	}

	@Override
	public void close() throws IOException {
		jedis.close();
	}

	private String addNameSpace(String key) {
		return this.namespace + key;
	}

	@Override
	public Long ttl(String key) {
		return jedis.ttl(addNameSpace(key));
	}

	private boolean isOk(String reply) {
		return OK.equalsIgnoreCase(reply);
	}
}



package com.guoheli.inf.sclient.redis;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.exceptions.JedisDataException;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;

class BackupAdaptor implements JedisInternal {

	private static final String OK = "OK";

	private JedisPool jedisPool;

	private JedisPool backupJedisPool;

	BackupAdaptor(JedisPool jedisPool, JedisPool backupJedisPool) {
		this.jedisPool = jedisPool;
		this.backupJedisPool = backupJedisPool;
	}

	@Override
	public void set(String key, String value) {
		try (Jedis jedis = getJedis()) {
			String result = jedis.set(key, value);
			if (!isOk(result)) {
				throw new JedisDataException(String.format("redis set data error: %s. %s: %s", result, key, value));
			}
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				String result = jedis.set(key, value);
				if (!isOk(result)) {
					throw new JedisDataException(String.format("backup redis set data error: %s. %s: %s", result, key, value));
				}
			}
		}
	}

	@Override
	public String get(String key) {
		try (Jedis jedis = getJedis()) {
			return jedis.get(key);
		}
		catch (Exception e) {
			try (Jedis jedis = getBackupJedis()) {
				return jedis.get(key);
			}
		}
	}

	@Override
	public Long del(String key) {
		Long result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.del(key);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.del(key);
			}
		}
		return result > 0 ? result : backupResult;
	}

	@Override
	public Long del(String... keys) {
		Long result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.del(keys);
		}
		finally {
			try (Jedis jedis = getJedis()) {
				backupResult = jedis.del(keys);
			}
		}
		return result > 0 ? result : backupResult;
	}

	@Override
	public Long hset(String key, String field, String value) {
		Long result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.hset(key, field, value);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.hset(key, field, value);
			}
		}
		return result > 0 ? result : backupResult;
	}

	@Override
	public String hmset(String key, Map<String, String> hash) {
		String result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.hmset(key, hash);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.hmset(key, hash);
			}
		}
		return isOk(result) ? result : backupResult;
	}

	@Override
	public String hget(String key, String field) {
		try (Jedis jedis = getJedis()) {
			return jedis.hget(key, field);
		}
		catch (Exception e) {
			try (Jedis jedis = getBackupJedis()) {
				return jedis.hget(key, field);
			}
		}
	}

	@Override
	public List<String> hmget(String key, String... fields) {
		try (Jedis jedis = getJedis()) {
			return jedis.hmget(key, fields);
		}
		catch (Exception e) {
			try (Jedis jedis = getBackupJedis()) {
				return jedis.hmget(key, fields);
			}
		}
	}

	@Override
	public Map<String, String> hgetall(String key) {
		try (Jedis jedis = getJedis()) {
			return jedis.hgetAll(key);
		}
		catch (Exception e) {
			try (Jedis jedis = getBackupJedis()) {
				return jedis.hgetAll(key);
			}
		}
	}

	@Override
	public Long hdel(String key, String... fields) {
		Long result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.hdel(key, fields);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.hdel(key, fields);
			}
		}
		return result > 0 ? result : backupResult;
	}

	@Override
	public String setex(final String key, final int seconds, final String value) {
		String result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.setex(key, seconds, value);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.setex(key, seconds, value);
			}
		}
		return isOk(result) ? result : backupResult;
	}

	@Override
	public Boolean exists(final String key) {
		try (Jedis jedis = getJedis()) {
			return jedis.exists(key);
		}
		catch (Exception e) {
			try (Jedis jedis = getBackupJedis()) {
				return jedis.exists(key);
			}
		}
	}

	@Override
	public Long setnx(final String key, final String value) {
		Long result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.setnx(key, value);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.setnx(key, value);
			}
		}
		return result > 0 ? result : backupResult;
	}

	@Override
	public String getSet(final String key, final String value) {
		String result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.getSet(key, value);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.getSet(key, value);
			}
		}
		return isOk(result) ? result : backupResult;
	}

	@Override
	public Long expire(String key, int seconds) {
		Long result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.expire(key, seconds);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.expire(key, seconds);
			}
		}
		return result > 0 ? result : backupResult;
	}

	@Override
	public Long ttl(String key) {
		try (Jedis jedis = getJedis()) {
			return jedis.ttl(key);
		}
		catch (Exception e) {
			try (Jedis jedis = getBackupJedis()) {
				return jedis.ttl(key);
			}
		}
	}

	@Override
	public Long incr(String key) {
		Long result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.incr(key);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.incr(key);
			}
		}
		return result > 0 ? result : backupResult;
	}

	@Override
	public Long decr(String key) {
		Long result, backupResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.decr(key);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backupResult = jedis.decr(key);
			}
		}
		return result > 0 ? result : backupResult;
	}

	@Override
	public long sadd(String key, String... members) {
		long result, backResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.sadd(key, members);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backResult = jedis.sadd(key, members);
			}
		}
		return result > 0 ? result : backResult;
	}

	@Override
	public Set<String> smembers(String key) {
		Set<String> result, backResult;
		try (Jedis jedis = getJedis()) {
			result = jedis.smembers(key);
		}
		finally {
			try (Jedis jedis = getBackupJedis()) {
				backResult = jedis.smembers(key);
			}
		}
		return (result != null && !result.isEmpty()) ? result : backResult;
	}

	@Override
	public void close() throws IOException {
		if (jedisPool != null) {
			jedisPool.close();
		}
		if (backupJedisPool != null) {
			backupJedisPool.close();
		}
	}

	private Jedis getJedis() {
		if (jedisPool != null) {
			return jedisPool.getResource();
		}
		throw new RuntimeException("jedis is not initialize properly, check your config");
	}

	private Jedis getBackupJedis() {
		if (backupJedisPool != null) {
			return backupJedisPool.getResource();
		}
		throw new RuntimeException("backup jedis is not initialize properly, check your config");
	}

	private boolean isOk(String reply) {
		return OK.equalsIgnoreCase(reply);
	}
}



package com.guoheli.inf.sclient.redis;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;

interface JedisInternal {

	void set(String key, String value);

	String get(String key);

	Long del(String key);

	Long del(String... keys);

	Long hset(String key, String field, String value);

	String hget(String key, String field);

	String hmset(String key, Map<String, String> hash);

	List<String> hmget(String key, String... fields);

	Map<String, String> hgetall(String key);

	Long hdel(String key, String... fields);

	String setex(String key, int seconds, String value);

	Boolean exists(String key);

	Long setnx(String key, String value);

	String getSet(String key, String value);

	Long expire(String key, int seconds);

	Long incr(String key);

	Long decr(String key);

	long sadd(String key, String... members);

	Set<String> smembers(String key);

	Long ttl(String key);

	void close() throws IOException;

}
